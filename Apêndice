//É necessário utilizar a API CVDrone, autor: PUKU0X.

#include "ardrone/ardrone.h"
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include <stdio.h>
#include <string>
#include <dos.h>
#include <vector>
#include <math.h>
using namespace cv;

int main(int argc, char *argv[]) {

	ARDrone ardrone;
	//Inicializa o drone
	if (!ardrone.open()) {
		std::cout << "Falha ao iniciar!." << std::endl;
		return -1;
	}

	//Cabeçalho
	std::cout << "========================================" << std::endl;
	std::cout << "*  Controle semiautonomo para drone   *" << std::endl;
	std::cout << "*          Rafael Freitas Batista     *" << std::endl;
	std::cout << "*  Tabata Aparecida de Oliveira Silva *" << std::endl;
	std::cout << "========================================" << std::endl;

	//Indica a porcentagem da bateria quando começa a comunicação
	std::cout << "Porcentagem da bateria: " << ardrone.getBatteryPercentage() << "[%]" << std::endl;

	//Variáveis 
	double vx, vy, vz, vr;
	double Roll, Pitch, Yaw, Vel, altitude;
	long tempo = 0;
	int  inf_x_a, inf_y_a;
	int LimInf_Y = 100, LimSup_Y = 330, LimInf_X = 50, LimSup_X = 550, raio_vermelho = 0, raio_azul = 0, LimSup_R = 30, LimInf_R = 60;
	float ref_vermelha = M_PI * pow(60, 2), area_vermelha;

	//Calibração 
	ardrone.setFlatTrim();

	//Trackbar  
 	/*int minH = 0, maxH = 255;
	int minS = 0, maxS = 255;
	int minV = 0, maxV = 255;
	namedWindow("Trackbar");
	createTrackbar("H max", "Trackbar", &maxH, 255);
	createTrackbar("S max", "Trackbar", &maxS, 255);
	createTrackbar("V max", "Trackbar", &maxV, 255);
	createTrackbar("H min", "Trackbar", &minH, 255);
	createTrackbar("S min", "Trackbar", &minS, 255);
	createTrackbar("V min", "Trackbar", &minV, 255);
	resizeWindow("Trackbar", 0, 0); */

	//Loop principal
	while (1) {

		int key = cvWaitKey(1);
		if (key == 0x1b) break;

		//Atualiza versão
		if (!ardrone.update()) break;

		//Os ângulos rotativos do drone
		Roll = ardrone.getRoll();
		Pitch = ardrone.getPitch();
		Yaw = ardrone.getYaw();
		Vel = ardrone.getVelocity();
		altitude = ardrone.getAltitude();

		//Captura a transmissão
		Mat video = ardrone.getImage();
		Mat copia_video = video.clone();
	
		//Filtro desfoque médio
		medianBlur(copia_video, copia_video, 13);

		//Convertendo espaço (RGB) BGR em HSV
		cvtColor(copia_video, copia_video, COLOR_BGR2HSV);

		//Segmentação de cor 
		Mat vermelho_video, azul_video;

		/* Altera os valores com o Trackbar
		inRange(copia_video, Scalar(minH, minS, minV), Scalar(maxH, maxS, maxV), vermelho_video);
		inRange(copia_video, Scalar(minH, minS, minV), Scalar(maxH, maxS, maxV), azul_video);*/

		inRange(copia_video, Scalar(0, 120, 75), Scalar(10, 255, 255), vermelho_video);
		inRange(copia_video, Scalar(94, 80, 0), Scalar(126, 255, 255), azul_video);

		//Elemento estruturante 
		Mat elemento1 = getStructuringElement(MORPH_ERODE, Size(9, 9)) * 255;
		Mat elemento2 = getStructuringElement(MORPH_DILATE, Size(9, 9)) * 255;
		
		//Erosão
		erode(vermelho_video, vermelho_video, elemento1);
		erode(azul_video, azul_video, elemento1);

		//Dilatação
		dilate(vermelho_video, vermelho_video, elemento2);
		dilate(azul_video, azul_video, elemento2);

		//Threshold
		threshold(vermelho_video, vermelho_video, 157, 255, THRESH_TRUNC);
		threshold(azul_video, azul_video, 157, 255, THRESH_TRUNC);

		//Filtro de desfoque gaussiano
		GaussianBlur(vermelho_video, vermelho_video, Size(9, 9), 5, 5);
		GaussianBlur(azul_video, azul_video, Size(9, 9), 5, 5);

		//Transformação de hough para identificar os circulos
		std::vector<Vec3f> circulos_vermelhos, circulos_azuis;
		HoughCircles(vermelho_video, circulos_vermelhos, CV_HOUGH_GRADIENT, 1, vermelho_video.rows / 4, 100, 20, 1, 600);
		HoughCircles(azul_video, circulos_azuis, CV_HOUGH_GRADIENT, 1, azul_video.rows / 4, 100, 20, 20, 600);

		//Verifica todos os circulos detectados e desenha na imagem original
		for (size_t current_circle_vermelho = 0; current_circle_vermelho < circulos_vermelhos.size(); ++current_circle_vermelho)
		{
			Point center(cvRound(circulos_vermelhos[current_circle_vermelho][0]), cvRound(circulos_vermelhos[current_circle_vermelho][1]));
			raio_vermelho = cvRound(circulos_vermelhos[current_circle_vermelho][2]);
			circle(video, center, 1, Scalar(0, 255, 0), -1, 5, 0);
			circle(video, center, raio_vermelho, Scalar(0, 255, 0), 2);
			inf_y_a = std::round(circulos_vermelhos[current_circle_vermelho][1]);
			inf_x_a = std::round(circulos_vermelhos[current_circle_vermelho][0]);
			area_vermelha = M_PI * pow(raio_vermelho, 2);

			if (area_vermelha >= ref_vermelha)
			{
				if (ardrone.onGround()) ardrone.takeoff();
				// Troca a câmera
				static int mode = 0;
				ardrone.setCamera(++mode % 4);
			}
		}

		vx = 0.0, vy = 0.0, vr = 0.0;
		ardrone.move(vx, vy, vr);

		for (size_t current_circle_azul = 0; current_circle_azul < circulos_azuis.size(); ++current_circle_azul)
		{
			Point center(std::round(circulos_azuis[current_circle_azul][0]), std::round(circulos_azuis[current_circle_azul][1]));
			raio_azul = std::round(circulos_azuis[current_circle_azul][2]);
			circle(video, center, 3, Scalar(0, 255, 0), -1, 5, 0);
			circle(video, center, raio_azul, Scalar(0, 255, 0), 2);
			inf_x_a = std::round(circulos_azuis[current_circle_azul][0]);
			inf_y_a = std::round(circulos_azuis[current_circle_azul][1]);

			vx = 0.0, vy = 0.0, vr = 0.0;
			ardrone.move(vx, vy, vr);

				if ((LimInf_R > raio_azul) && (raio_azul > LimSup_R)) {
	
					tempo = tempo + 1;

					if (inf_x_a < LimInf_X) {

						vx = 0.0, vy = 1.0, vr = 0.0;
						ardrone.move(vx, vy, vr);

						vx = 0.0, vy = 0.0, vr = 0.0;
						ardrone.move(vx, vy, vr);
					}

					if (inf_x_a > LimSup_X) {
						vx = 0.0, vy = -1.0, vr = 0.0;
						ardrone.move(vx, vy, vr);

						vx = 0.0, vy = 0.0, vr = 0.0;
						ardrone.move(vx, vy, vr);
					}

					if (inf_y_a < LimInf_Y) {

						vx = 1.0, vy = 0.0, vr = 0.0;
						ardrone.move(vx, vy, vr);

						vx = 0.0, vy = 0.0, vr = 0.0;
						ardrone.move(vx, vy, vr);
					}

					if (inf_y_a > LimSup_Y) {
						vx = -1.0, vy = 0.0, vr = 0.0;
						ardrone.move(vx, vy, vr);

						vx = 0.0, vy = 0.0, vr = 0.0;
						ardrone.move(vx, vy, vr);
					}

					if (tempo == 100)
					{
						ardrone.landing();
						tempo = 0;
					}
				}

				if (raio_azul < LimSup_R) {

					vx = 0.0, vy = 0.0, vz = -1.0, vr = 0.0;
					ardrone.move3D(vx, vy, vz, vr);
				}

				if (raio_azul > LimInf_R) {
					vx = 0.0, vy = 0.0, vz = 1.0, vr = 0.0;
					ardrone.move3D(vx, vy, vz, vr);
				}

				std::cout << "Raio: " << raio_azul << std::endl;
				std::cout << "Pitch: " << Pitch << std::endl;
				std::cout << "Roll: " << Roll << std::endl;
				std::cout << "Yaw: " << Yaw << std::endl;
				std::cout << "Altitude: " << altitude << std::endl;
		}

		//Nome dado à janela de cada elemento Mat
		namedWindow("Video Original", WINDOW_AUTOSIZE);
		//namedWindow("Vermelho Segmentado", WINDOW_AUTOSIZE);
		//namedWindow("Azul Segmentado", WINDOW_AUTOSIZE);
		//namedWindow("Original", WINDOW_AUTOSIZE);

		//Elemento de saída
		//imshow("Segmentado", vermelho_video);
		//imshow("Vermelho Segmentado", vermelho_video);
		//imshow("Azul Segmentado", azul_video);
		imshow("Video Original", video);

		//Pocisionar os quadros na tela do pc
		//moveWindow("Azul Segmentado", 50, 5);
		//moveWindow("Vermelho Segmentado", 50 + azul_video.cols + 5, 5);
		//moveWindow("Video Original", 50 + azul_video.cols + 5, 5 + vermelho_video.rows + 5);

		//Caso não exibido com os elementos de segmentação
		moveWindow("Video Original", 600, 5);
	}

	//Limpar o cache
	ardrone.close();
	return 0;
}

 
